{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO1DWS7wsMVwbya+1ctxlf2",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kavaykamatham/Advertisment_prediction/blob/main/Video%20recommendation\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "def get_user_history(user_id):\n",
        "    return {\"user_id\": user_id, \"watched\": [1, 3, 5, 7], \"liked\": [2, 4]}\n",
        "\n",
        "def get_video_metadata(video_id):\n",
        "    return {\"video_id\": video_id, \"genre\": \"Comedy\", \"tags\": [\"funny\", \"friends\"]}\n",
        "\n",
        "user_history = get_user_history(1)\n",
        "video_metadata = [get_video_metadata(video_id) for video_id in user_history[\"watched\"]]\n",
        "\n",
        "user_item_matrix = pd.DataFrame(data=[[1, 0, 1, 0, 1, 0, 1, 0],\n",
        "                                    [0, 1, 0, 1, 0, 1, 0, 1]],\n",
        "                            columns=[1, 2, 3, 4, 5, 6, 7, 8],\n",
        "                            index=[1, 2])\n",
        "\n",
        "\n",
        "video_features = pd.DataFrame(data=[[video[\"genre\"], \" \".join(video[\"tags\"])] for video in video_metadata],\n",
        "                              columns=[\"genre\", \"tags\"])\n",
        "\n",
        "encoder = OneHotEncoder(handle_unknown='ignore')\n",
        "encoded_genres = encoder.fit_transform(video_features[[\"genre\"]]).toarray()\n",
        "genre_columns = encoder.categories_[0]\n",
        "genre_df = pd.DataFrame(encoded_genres, columns=genre_columns)\n",
        "tfidf = TfidfVectorizer()\n",
        "tfidf_matrix = tfidf.fit_transform(video_features[\"tags\"])\n",
        "video_features = pd.concat([genre_df, pd.DataFrame(tfidf_matrix.toarray(), columns=tfidf.get_feature_names_out())], axis=1)\n",
        "\n",
        "video_similarity = cosine_similarity(video_features)\n",
        "\n",
        "# Rest of the code (user-based collaborative filtering, content-based filtering) remains the same\n",
        "# ..."
      ],
      "metadata": {
        "id": "isRLeJzXVcdn"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "def evaluate_recommendations(recommendations, ground_truth):\n",
        "  relevant_recommended = set(recommendations) & set(ground_truth)\n",
        "  precision = len(relevant_recommended) / len(recommendations) if len(recommendations) > 0 else 0\n",
        "  recall = len(relevant_recommended) / len(ground_truth) if len(ground_truth) > 0 else 0\n",
        "  return precision, recall\n",
        "\n",
        "recommendations = [1, 3, 5, 7, 9]\n",
        "ground_truth = [2, 3, 5, 8]\n",
        "precision, recall = evaluate_recommendations(recommendations, ground_truth)\n",
        "\n",
        "print(\"Precision:\", precision)\n",
        "print(\"Recall:\", recall)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G74OwClUVhhA",
        "outputId": "a4fa7d7e-e0a1-4524-84a0-79bffdc4d9de"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Precision: 0.4\n",
            "Recall: 0.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "new_video_metadata = {\"video_id\": 10, \"genre\": \"Sci-Fi\", \"tags\": [\"space\", \"aliens\", \"adventure\"]}\n",
        "new_video_features = pd.DataFrame(data=[[new_video_metadata[\"genre\"], \" \".join(new_video_metadata[\"tags\"])]],\n",
        "                                  columns=[\"genre\", \"tags\"])\n",
        "new_genre_encoded = encoder.transform(new_video_features[[\"genre\"]]).toarray()\n",
        "new_genre_df = pd.DataFrame(new_genre_encoded, columns=genre_columns)\n",
        "\n",
        "new_tfidf_matrix = tfidf.transform(new_video_features[\"tags\"])\n",
        "\n",
        "new_video_features = pd.concat([new_genre_df, pd.DataFrame(new_tfidf_matrix.toarray(), columns=tfidf.get_feature_names_out())], axis=1)\n",
        "\n",
        "similarities = cosine_similarity(new_video_features, video_features)\n",
        "recommendations = similarities.argsort()[0][::-1]\n",
        "\n",
        "print(\"Recommended Videos for New Video:\", recommendations)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kR-dlB5GXWnH",
        "outputId": "311aa430-86dd-4591-edbf-d7481cc7d4ae"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Recommended Videos for New Video: [3 2 1 0]\n"
          ]
        }
      ]
    }
  ]
}